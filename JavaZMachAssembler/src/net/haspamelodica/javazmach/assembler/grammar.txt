File
 -> MaybeVersionHeader FileEntries { file[-1] = ZAssemblerFile(version[0], fileEntries[1]); };

MaybeVersionHeader
 ->                              { version[-1] = optIntEmpty(); }
  | '.' 'zversion' NumberLiteral { version[-1] = optIntOf(int(bigint[2])); } ;

FileEntries
 ->                       { fileEntries[-1] = emptyAEList(); }
  | FileEntries FileEntry { fileEntries[-1] = appendAEList(fileEntries[0], fileEntry[1]); } ;

FileEntry
 -> HeaderEntry      { fileEntry[-1] = headerEntry[0]; }
  | Routine          { fileEntry[-1] = routine[0]; }
  | ObjectTable      { fileEntry[-1] = table[0]; }
  | GlobalVarTable   { fileEntry[-1] = globals[0]; }
  | LabelDeclaration { fileEntry[-1] = labelDeclaration[0]; }
  | Instruction      { fileEntry[-1] = instruction[0]; }
  | Section          { fileEntry[-1] = section[0];} ;

HeaderEntry
 -> '.' 'zheader' 'ident' HeaderValue { headerEntry[-1] = HeaderEntry(str([2]), headerValue[3]); } ;

Routine
 -> '.' 'routine' 'ident' RoutineLocals { routine[-1] = Routine(str([2]), routineLocals[3]); } ;

ObjectTable
 -> '.' 'objects' Properties Objects { table[-1] = ZObjectTable(properties[2], objects[3]); };

Properties
 -> Properties Property { properties[-1] = appendPropList(properties[0], property[1]); }
 | { properties[-1] = emptyPropList(); };

Property
 -> '.' 'property' NumberLiteral ByteSequence { property[-1] = Property(bigint[2], sequence[3]); };

Objects
 -> Objects Object { objects[-1] = appendObjList(objects[0], object[1]); }
 | { objects[-1] = emptyObjList(); };

Object
 -> '.' 'object' ZStringElements '{' ObjectEntries '}' { object[-1] = ZObject(ZString(elements[2]), elements[4]); };

// Could also track the inner elements in separate lists but that seems painful
ObjectEntries
 -> ObjectEntries ObjectEntry { elements[-1] = appendOEList(elements[0], element[1]); }
 | { elements[-1] = emptyOEList(); };

ObjectEntry
 -> Object { element[-1] = object[0]; }
 |  Attribute { element[-1] = attribute[0]; }
 |  Property { element[-1] = property[0]; };

Attribute
 -> '.' 'attribute' NumberLiteral { attribute[-1] = ZAttribute(bigint[2]); };

GlobalVarTable
 -> '.' 'globals' Globals { globals[-1] = GlobalVarTable(globals[2]); } ;

Globals
 ->                                                      { globals[-1] = emptyGlList(); }
  | Globals '.' 'global' 'ident' MaybeIntegralValue      { globals[-1] = appendGlList(globals[0], Global(str([3]), valueOpt[4])); } ;

RoutineLocals
 ->                                                      { routineLocals[-1] = emptyRLList(); }
  | RoutineLocals '.' 'local' 'ident' MaybeIntegralValue { routineLocals[-1] = appendRLList(routineLocals[0], RoutineLocal(str([3]), valueOpt[4])); } ;

Section -> '.' 'section' SectionType MaybeIntegralValue { section[-1] = SectionDeclaration(sectionType[2], valueOpt[3]); } ;

SectionType
 -> 'dynamic' { sectionType[-1] = DYNAMIC(); }
  | 'static'  { sectionType[-1] = STATIC(); }
  | 'high'    { sectionType[-1] = HIGH(); } ;

MaybeIntegralValue
 ->               { valueOpt[-1] = optIntegralValueEmpty(); }
  | IntegralValue { valueOpt[-1] = optIntegralValueOf(value[0]); } ;

HeaderValue
 -> IntegralValue                        { headerValue[-1] = value[0]; }
  | ByteSequenceElementNoIntegralLiteral { headerValue[-1] = ByteSequence(appendByteSequenceList(emptyByteSequenceList(), element[0])); }
  | ByteSequenceMin2                     { headerValue[-1] = sequence[0]; } ;

LabelDeclaration -> 'ident' ':' { labelDeclaration[-1] = LabelDeclaration(str([0])); } ;

Instruction -> Opcode MaybeForm Operands MaybeStoreTarget MaybeBranchInfo MaybeText { instruction[-1] =
    AssemblerZMachInstruction(str(str[0]), form[1], operands[2], storeTarget[3], branchInfo[4], text[5]); } ;

Opcode
 -> 'opcode_orig'  { str[-1] = [0]; }
  | 'opcode_lower' { str[-1] = [0]; }
  | 'opcode_upper' { str[-1] = [0]; }
  | 'rfalse'       { str[-1] = [0]; }
  | 'rtrue'        { str[-1] = [0]; } ;

MaybeForm
 ->          { form[-1] = optFormEmpty(); }
  | '.' Form { form[-1] = optFormOf(formRaw[1]); } ;

Form
 -> 'lng' { formRaw[-1] = LONG(); }
  | 'srt' { formRaw[-1] = SHORT(); }
  | 'ext' { formRaw[-1] = EXTENDED(); }
  | 'var' { formRaw[-1] = VARIABLE(); } ;

Operands
 ->              { operands[-1] = emptyOperandList(); }
  | Operand      { operands[-1] = appendOperandList(emptyOperandList(), operand[0]); }
  | OperandsMin2 { operands[-1] = operands[0]; } ;

OperandsMin2 -> OperandsEndingComma Operand { operands[-1] = appendOperandList(operands[0], operand[1]); } ;

OperandsEndingComma
 -> Operand ','                     { operands[-1] = appendOperandList(emptyOperandList(), operand[0]); }
  | OperandsEndingComma Operand ',' { operands[-1] = appendOperandList(operands[0], operand[1]); } ;

Operand
 -> IntegralValue { operand[-1] = value[0]; }
  | Variable      { operand[-1] = variable[0]; } ;

MaybeStoreTarget
 ->               { storeTarget[-1] = optVariableEmpty(); }
  | '->' Variable { storeTarget[-1] = optVariableOf(variable[1]); } ;

MaybeBranchInfo
 -> { branchInfo[-1] = optBranchInfoEmpty(); }
  | '?' MaybeBranchInfoBranchOnConditionFalse BranchTarget MaybeBranchLengthOverride
    { branchInfo[-1] = optBranchInfoOf(BranchInfo(branchOnConditionFalse[1], branchTarget[2], branchLengthOverride[3])); } ;

MaybeBranchInfoBranchOnConditionFalse
 ->     { branchOnConditionFalse[-1] = false(); }
  | '~' { branchOnConditionFalse[-1] = true(); } ;

BranchTarget
 -> 'rfalse'             { branchTarget[-1] = rfalse(); }
  | 'rtrue'              { branchTarget[-1] = rtrue(); }
  | IntegralValueNoTilde { branchTarget[-1] = value[0]; } ;

MaybeBranchLengthOverride
 ->                      { branchLengthOverride[-1] = optBranchLengthEmpty(); } 
  | '[' 'longbranch' ']' { branchLengthOverride[-1] = optBranchLengthOf(LONGBRANCH()); } 
  | '[' 'shortbranch' ']' { branchLengthOverride[-1] = optBranchLengthOf(SHORTBRANCH()); } ;

MaybeText
 ->                 { text[-1] = optZStringEmpty(); }
  | ZStringElements { text[-1] = optZStringOf(ZString(elements[0])); } ;

ZStringElements
 -> ZStringElement                 { elements[-1] = appendZStringElementList(emptyZStringElementList(), element[0]); }
  | ZStringElements ZStringElement { elements[-1] = appendZStringElementList(elements[0], element[1]); } ;

ZStringElement
 -> 'text' { element[-1] = ZStringElement(parseText([0])); } ;

ByteSequence
 -> ByteSequenceElement { sequence[-1] = ByteSequence(appendByteSequenceList(emptyByteSequenceList(), element[0])); }
  | ByteSequenceMin2    { sequence[-1] = sequence[0]; } ;

ByteSequenceMin2 -> ByteSequenceEndingComma ByteSequenceElement
  { sequence[-1] = ByteSequence(appendByteSequenceList(elements[0], element[1])); } ;

ByteSequenceEndingComma
 -> ByteSequenceElement ','                         { elements[-1] = appendByteSequenceList(emptyByteSequenceList(), element[0]); }
  | ByteSequenceEndingComma ByteSequenceElement ',' { elements[-1] = appendByteSequenceList(elements[0], element[1]); } ;

ByteSequenceElement
 -> IntegralLiteral                      { element[-1] = literal[0]; }
  | ByteSequenceElementNoIntegralLiteral { element[-1] = element[0]; } ;

ByteSequenceElementNoIntegralLiteral
 -> 'text' { element[-1] = StringLiteral(parseText([0])); } ;

// NoTilde variant disallows a ~ at the start.
// Needed because otherwise the grammar would be ambiguous because of clash with branch-on-condition-false.
IntegralValue -> IExpr { value[-1] = value[0]; } ;
IntegralValueNoTilde -> IExprNoTilde { value[-1] = value[0]; } ;

IExpr -> IExprOr { value[-1] = value[0]; } ;
IExprNoTilde -> IExprOrNoTilde { value[-1] = value[0]; } ;

IExprOr
 -> IExprXor             { value[-1] = value[0]; }
  | IExprOr '|' IExprXor { value[-1] = BinaryExpression(value[0], BITWISE_OR(), value[2]); } ;
IExprOrNoTilde
 -> IExprXorNoTilde             { value[-1] = value[0]; }
  | IExprOrNoTilde '|' IExprXor { value[-1] = BinaryExpression(value[0], BITWISE_OR(), value[2]); } ;

IExprXor
 -> IExprAnd              { value[-1] = value[0]; }
  | IExprXor '^' IExprAnd { value[-1] = BinaryExpression(value[0], BITWISE_XOR(), value[2]); } ;
IExprXorNoTilde
 -> IExprAndNoTilde              { value[-1] = value[0]; }
  | IExprXorNoTilde '^' IExprAnd { value[-1] = BinaryExpression(value[0], BITWISE_XOR(), value[2]); } ;

IExprAnd
 -> IExprShift              { value[-1] = value[0]; }
  | IExprAnd '&' IExprShift { value[-1] = BinaryExpression(value[0], BITWISE_AND(), value[2]); } ;
IExprAndNoTilde
 -> IExprShiftNoTilde              { value[-1] = value[0]; }
  | IExprAndNoTilde '&' IExprShift { value[-1] = BinaryExpression(value[0], BITWISE_AND(), value[2]); } ;

IExprShift
 -> IExprAdditive                 { value[-1] = value[0]; }
  | IExprShift '<<' IExprAdditive { value[-1] = BinaryExpression(value[0], LSHIFT(), value[2]); }
  | IExprShift '>>' IExprAdditive { value[-1] = BinaryExpression(value[0], RSHIFT(), value[2]); } ;
IExprShiftNoTilde
 -> IExprAdditiveNoTilde                 { value[-1] = value[0]; }
  | IExprShiftNoTilde '<<' IExprAdditive { value[-1] = BinaryExpression(value[0], LSHIFT(), value[2]); }
  | IExprShiftNoTilde '>>' IExprAdditive { value[-1] = BinaryExpression(value[0], RSHIFT(), value[2]); } ;

IExprAdditive
 -> IExprMultiplicative                   { value[-1] = value[0]; }
  | IExprAdditive '+' IExprMultiplicative { value[-1] = BinaryExpression(value[0], ADD(), value[2]); }
  | IExprAdditive '-' IExprMultiplicative { value[-1] = BinaryExpression(value[0], SUBTRACT(), value[2]); } ;
IExprAdditiveNoTilde
 -> IExprMultiplicativeNoTilde                   { value[-1] = value[0]; }
  | IExprAdditiveNoTilde '+' IExprMultiplicative { value[-1] = BinaryExpression(value[0], ADD(), value[2]); }
  | IExprAdditiveNoTilde '-' IExprMultiplicative { value[-1] = BinaryExpression(value[0], SUBTRACT(), value[2]); } ;

IExprMultiplicative
 -> IExprUnary                         { value[-1] = value[0]; }
  | IExprMultiplicative '*' IExprUnary { value[-1] = BinaryExpression(value[0], MULTIPLY(), value[2]); }
  | IExprMultiplicative '/' IExprUnary { value[-1] = BinaryExpression(value[0], DIVIDE(), value[2]); }
  | IExprMultiplicative '%' IExprUnary { value[-1] = BinaryExpression(value[0], MODULO(), value[2]); } ;
IExprMultiplicativeNoTilde
 -> IExprUnaryNoTilde                         { value[-1] = value[0]; }
  | IExprMultiplicativeNoTilde '*' IExprUnary { value[-1] = BinaryExpression(value[0], MULTIPLY(), value[2]); }
  | IExprMultiplicativeNoTilde '/' IExprUnary { value[-1] = BinaryExpression(value[0], DIVIDE(), value[2]); }
  | IExprMultiplicativeNoTilde '%' IExprUnary { value[-1] = BinaryExpression(value[0], MODULO(), value[2]); } ;

IExprUnary
 -> IExprUnaryNoTilde { value[-1] = value[0]; }
  | '~' IExprUnary    { value[-1] = UnaryExpression(BITWISE_NOT(), value[1]); } ;
IExprUnaryNoTilde
 -> IExprPrimary   { value[-1] = value[0]; }
  | '+' IExprUnary { value[-1] = value[1]; }
  | '-' IExprUnary { value[-1] = UnaryExpression(NEGATE(), value[1]); } ;

IExprPrimary
 -> IntegralLiteral { value[-1] = literal[0]; }
  | LabelReference  { value[-1] = label[0]; }
  | '(' IExpr ')'   { value[-1] = value[1]; } ;

LabelReference -> 'ident' { label[-1] = LabelReference(str([0])); } ;

// For better error handling, each terminal allows all digits,
// and errors are catched in the function parseBigInt().
Variable
 -> 'sp'          { variable[-1] = StackPointer(); }
  | 'lvar_dec'    { variable[-1] =  LocalVariable(int(parseBigInt(_1(), _10(), [0]))); }
  | 'lvar_hex_0x' { variable[-1] =  LocalVariable(int(parseBigInt(_3(), _16(), [0]))); }
  | 'lvar_hex_#'  { variable[-1] =  LocalVariable(int(parseBigInt(_2(), _16(), [0]))); }
  | 'lvar_bin_0b' { variable[-1] =  LocalVariable(int(parseBigInt(_3(),  _2(), [0]))); }
  | 'lvar_bin_$$' { variable[-1] =  LocalVariable(int(parseBigInt(_3(),  _2(), [0]))); }
  | 'gvar_dec'    { variable[-1] = GlobalVariable(int(parseBigInt(_1(), _10(), [0]))); }
  | 'gvar_hex_0x' { variable[-1] = GlobalVariable(int(parseBigInt(_3(), _16(), [0]))); }
  | 'gvar_hex_#'  { variable[-1] = GlobalVariable(int(parseBigInt(_2(), _16(), [0]))); }
  | 'gvar_bin_0b' { variable[-1] = GlobalVariable(int(parseBigInt(_3(),  _2(), [0]))); }
  | 'gvar_bin_$$' { variable[-1] = GlobalVariable(int(parseBigInt(_3(),  _2(), [0]))); } ;

IntegralLiteral
 -> NumberLiteral { literal[-1] = NumberLiteral(bigint[0]); }
  | 'char'        { literal[-1] = CharLiteral(parseChar([0])); } ;

// For better error handling, each terminal allows all digits,
// and errors are catched in the function parseBigInt().
NumberLiteral
 -> 'pos_number_dec'    { bigint[-1] = parseBigInt(_0(), _10(), [0]); }
  | 'pos_number_hex_0x' { bigint[-1] = parseBigInt(_2(), _16(), [0]); }
  | 'pos_number_hex_#'  { bigint[-1] = parseBigInt(_1(), _16(), [0]); }
  | 'pos_number_bin_0b' { bigint[-1] = parseBigInt(_2(),  _2(), [0]); }
  | 'pos_number_bin_$$' { bigint[-1] = parseBigInt(_2(),  _2(), [0]); } ;

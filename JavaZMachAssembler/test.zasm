.ZVERSION 3

.ZHEADER StatLineType 0
.ZHEADER StoryfileSplit 0
.ZHEADER Tandy 0
.ZHEADER ReleaseNumber 0x42
.ZHEADER SerialNum C"421337"
.ZHEADER CompilerVer 0x1337
.ZHEADER InitialPC15 entry

.OBJECTS
.PROPERTY 1  1, 0
.PROPERTY 15 255, 128
.OBJECT "HELLO" {
	.ATTRIBUTE 0
	.ATTRIBUTE 4
	
	.PROPERTY 1 C"Hello"
	.PROPERTY 2 "to,ke ns"
	.OBJECT "WORLD" {
		.PROPERTY 15 0, 0
		.PROPERTY 1 C"World"
	}
	.OBJECT "!" {
		.PROPERTY 1 C"!"
	}
}

.GLOBALS
.GLOBAL bsdf entry
.GLOBAL csdf 0
.GLOBAL someglobal 5463

.BUFFER 16 BYTE testbuffer1
.BUFFER testbuffer2 "This is the buffer content.\n"

.SECTION static

.DICTIONARY '.' ',' '"'
.KEY "mail"
.DATA 1 BYTE 00
.KEY "door"
.DATA 1 BYTE 00
.KEY "hit"
.DATA 1 BYTE 01
.DATA 2 BYTE testroutine


entry:


print "\n\n--- Testing verify / checksum\n"
verify ? checksum_match
print "checksum wrong!\n"
// Unfortunately, the unconditional branch is asinine to use.
jz 0 ? checksum_after
checksum_match:
print "checksum verified!\n"
checksum_after:


print "\n\n--- Basic experiments\n"
call testroutine, 1234 -> sp
print "The someglobal (should be 5463): "  print_num someglobal  new_line
print_obj 1
print "\n"


print "\n\n--- Testing attrs\n"
test_attr 1, 4 ? attr4_set
print "obj1.attribute4 is unset! (incorrect)\n"
jz 0 ? attr4_after
attr4_set:
print "obj1.attribute4 is set! (correct)\n"
attr4_after:

test_attr 1, 2 ? attr2_set
print "obj1.attribute2 is unset! (correct)\n"
jz 0 ? attr2_after
attr2_set:
print "obj1.attribute2 is set! (incorrect)\n"
attr2_after:


print "\n\n--- Testing macro calls\n"
.MACRO testmacro
.MACROPARAM theparam
.MACROPARAM scratchreg1
.MACROPARAM scratchreg2
print "Macro called with arg "
print_num ..theparam
print ". "
add 0, ..theparam -> ..scratchreg1
loop:
call localroutine -> ..scratchreg2
sub ..scratchreg1, 1 -> ..scratchreg1
jg ..scratchreg1, 0 ?loop
new_line
jg 1, 0 ?afterlocalroutine

.ROUTINE localroutine
print "Loop"
rtrue

afterlocalroutine:
.ENDMACRO

add 0, 2 -> g1
print "Expecting arg 1 and one loop:    "
.testmacro 1, g0, g2
print "Expecting arg 2 and two loops:   "
.testmacro g1, g0, g2
print "Expecting arg 3 and three loops: "
.testmacro 3, g0, g1


.MACRO testrefouter
je 0, 0 ?testrefoutertarget
.ENDMACRO

.testrefouter
print "shouldn't happen"
testrefoutertarget:



.MACRO innermacro
.MACROPARAM entry
.MACROPARAM a
print "Shouldn't happen!"
quit
.:entry:
print_num ..a + 1
new_line
.ENDMACRO

.MACRO outermacro
.MACROPARAM entry
.MACROPARAM a
.innermacro ..entry, ..a * 2
.ENDMACRO

print "Expecting 11: "
jz 0 ?outermacroentry
print "Shouldn't happen 2!"
.outermacro outermacroentry, 5


print "\n\n--- Testing add4_vars\n"
.MACRO add_simulcarry_vars_0x8000
	.MACROPARAM an0
	.MACROPARAM bn0
	.MACROPARAM an1
	.MACROPARAM bn1
	.MACROPARAM an0_carry
	.MACROPARAM an1_carry
	                                 // <from previous> if(!a0_carry) { 
	add ..bn0, 0x8000 -> ..bn0       //   b0 += 0x8000;
	add ..an0, ..bn0 -> ..an0        //   a0 += b0;
	jl ..an0, ..bn0 ?~not_an1_carry  //   a0_carry = a0 < b0; }
	.:an0_carry:                     // if(a0_carry) {
	add ..bn1, 1 -> ..bn1            //   b1 ++;
	je ..bn1, 0x0000 ?~not_an1_carry //   if(b1 == 0x0000) {
	add ..an1, 0x8000 -> ..an1       //     a1 += 0x8000;
	je 0, 0 ?..an1_carry             //     a1_carry = true; } }
	not_an1_carry:                   // if(!a1_carry) {
.ENDMACRO
.MACRO add_simulcarry_vars_last
	.MACROPARAM an0
	.MACROPARAM bn0
	.MACROPARAM an0_carry
	
	// Do the final add and provide the an0_carry label (without letting it do anything)
	add ..an0, ..bn0 -> ..an0
	.:an0_carry:
.ENDMACRO
.MACRO add4_vars
	.MACROPARAM a0
	.MACROPARAM a1
	.MACROPARAM a2
	.MACROPARAM a3
	.MACROPARAM b0
	.MACROPARAM b1
	.MACROPARAM b2
	.MACROPARAM b3
	
	.add_simulcarry_vars_0x8000 ..a0, ..b0, ..a1, ..b1, a0_carry, a1_carry
	.add_simulcarry_vars_0x8000 ..a1, ..b1, ..a2, ..b2, a1_carry, a2_carry
	.add_simulcarry_vars_0x8000 ..a2, ..b2, ..a3, ..b3, a2_carry, a3_carry
	.add_simulcarry_vars_last   ..a3, ..b3,             a3_carry
	
	add ..a0, 0x8000 -> ..a0
	add ..a1, 0x8000 -> ..a1
	add ..a2, 0x8000 -> ..a2
.ENDMACRO

add 0, 2 -> g0
add 0, 6565 -> g1
add 0, 321 -> g2
add 0, 0 -> g3
add 0, 0xffff -> g4
add 0, 0xffff -> g5
add 0, 123 -> g6
add 0, 0 -> g7
.add4_vars g0, g1, g2, g3, g4, g5, g6, g7
je g0, 1 ?~addfail
je g1, 6565 ?~addfail
je g2, 445 ?~addfail
je g3, 0 ?~addfail
print "First add check correct\n"

add 0, 1 -> g0
add 0, 789 -> g1
add 0, 456 -> g2
add 0, 123 -> g3
add 0, 0xffff -> g4
add 0, 0xffff -> g5
add 0, 0xffff -> g6
add 0, 321 -> g7
.add4_vars g0, g1, g2, g3, g4, g5, g6, g7
je g0, 0 ?~addfail
je g1, 789 ?~addfail
je g2, 456 ?~addfail
je g3, 445 ?~addfail
print "Second add check correct\n"

jz 0 ?addend
addfail:
print "add4_vars had incorrect result (incorrect)\n"
addend:


print "\n\n--- Testing add4_const\n"
.MACRO add_simulcarry_consts_0x8000
	.MACROPARAM an0
	.MACROPARAM bn0
	.MACROPARAM an1
	.MACROPARAM bn1
	.MACROPARAM an0_justcheck
	.MACROPARAM an0_carry
	.MACROPARAM an1_justcheck
	.MACROPARAM an1_carry
	                                         // <from previous> if(!a0_justcheck && !a0_carry)
	add ..an0, (..bn0 + 0x8000) & 0xffff -> ..an0       //   a0 += b0 + 0x8000;
	.:an0_justcheck:                         // if(!a0_carry)
	jl ..an0, (..bn0 + 0x8000) & 0xffff ?~not_an0_carry //   a0_carry = a0 < (byte) (b0 + 0x8000);
	.:an0_carry:                             // if(a0_carry) {
	add ..an1, (..bn1 + 0x8001) & 0xffff -> ..an1       //     a1 += b1 + 0x8001;
	//TODO if we ever support that, we could make this a compile-time check
	je ..bn1, 0xffff ?..an1_carry            //   if(b1 == (byte) 0xffff) a1_carry = true;
	je 0, 0 ?..an1_justcheck                 //   a1_justcheck = true; }
	not_an0_carry:                           // if(!a1_justcheck && !a1_carry)
.ENDMACRO
.MACRO add_simulcarry_consts_last
	.MACROPARAM an0
	.MACROPARAM bn0
	.MACROPARAM an0_justcheck
	.MACROPARAM an0_carry
	
	// Do the final add and provide the an0_carry and an0_justcheck labels (without letting them do anything)
	add ..an0, (..bn0 + 0x8000) & 0xffff -> ..an0
	.:an0_justcheck:
	.:an0_carry:
.ENDMACRO
.MACRO add4_consts
	.MACROPARAM a0
	.MACROPARAM a1
	.MACROPARAM a2
	.MACROPARAM a3
	.MACROPARAM b0
	.MACROPARAM b1
	.MACROPARAM b2
	.MACROPARAM b3
	
	.add_simulcarry_consts_0x8000 ..a0, ..b0, ..a1, ..b1, a0_carry, a0_justcheck, a1_carry, a1_justcheck
	.add_simulcarry_consts_0x8000 ..a1, ..b1, ..a2, ..b2, a1_carry, a1_justcheck, a2_carry, a2_justcheck
	.add_simulcarry_consts_0x8000 ..a2, ..b2, ..a3, ..b3, a2_carry, a2_justcheck, a3_carry, a3_justcheck
	.add_simulcarry_consts_last   ..a3, ..b3,             a3_carry, a3_justcheck
	
	add ..a0, 0x8000 -> ..a0
	add ..a1, 0x8000 -> ..a1
	add ..a2, 0x8000 -> ..a2
	add ..a3, 0x8000 -> ..a3
.ENDMACRO
.MACRO add4_const
	.MACROPARAM a0
	.MACROPARAM a1
	.MACROPARAM a2
	.MACROPARAM a3
	.MACROPARAM b
	
	.add4_consts ..a0, ..a1, ..a2, ..a3,
		(..b >> 0x00) & 0xffff,
		(..b >> 0x10) & 0xffff,
		(..b >> 0x20) & 0xffff,
		(..b >> 0x30) & 0xffff
.ENDMACRO

add 0, 2 -> g0
add 0, 6565 -> g1
add 0, 321 -> g2
add 0, 0 -> g3
.add4_const g0, g1, g2, g3, 0x7bffffffff
je g0, 1 ?~addconstfail
je g1, 6565 ?~addconstfail
je g2, 445 ?~addconstfail
je g3, 0 ?~addconstfail
print "First add check correct\n"

add 0, 1 -> g0
add 0, 789 -> g1
add 0, 456 -> g2
add 0, 123 -> g3
.add4_const g0, g1, g2, g3, 0x141ffffffffffff
je g0, 0 ?~addconstfail
je g1, 789 ?~addconstfail
je g2, 456 ?~addconstfail
je g3, 445 ?~addconstfail
print "Second add check correct\n"

jz 0 ?addconstend
addconstfail:
print "add4_consts had incorrect result (incorrect)\n"
addconstend:


print "\n\n--- Testing properties\n"
call testproperties -> sp
print "\n\n--- Testing printing buffer content\n"
call testbuffer -> sp

quit

// In practice, it's nonsensical why code should be before the high memory mark - this is just for testing.
// Code before the high memory mark shouldn't cause problems, so no diagnostic is expected.
.SECTION high

.ROUTINE testroutine
.LOCAL testroutinelocal
print "Hello from testroutine!\n"
je testroutinelocal, 1234 ?testroutinesuccess
print "testroutine argument wasn't 1234 (incorrect)"
testroutinesuccess:
print "testroutine argument was 1234 (correct)"  new_line
rtrue

.ROUTINE testproperties
.LOCAL prop
.LOCAL child
get_prop 1, 15 -> l0
jz l0 ? obj1prop1_zero
print "obj1.prop1 is not zero (correct)\n"
jz 0 ? obj1prop1_end
obj1prop1_zero:
print "obj1.prop1 is zero (incorrect)\n"
obj1prop1_end:

get_child 1 -> l1 ? has_child
print "obj1 has no child (incorrect)\n"
rtrue
has_child:
print "obj1 has a child (correct)\n"

get_prop l1, 15 -> l0
jz l0 ? child1prop1_zero
print "obj1.child1.prop1 is not zero (incorrect)\n"
jz 0 ? child1prop1_end
child1prop1_zero:
print "obj1.child1.prop1 is zero (correct)\n"
child1prop1_end:
rtrue

.ROUTINE testbuffer
print "Trying to print buffer content...\n"
print_addr testbuffer2
rtrue
